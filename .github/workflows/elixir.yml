name: Elixir CI

on: [push, pull_request]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  DEV_DOCKER_IMAGE: ${{ github.event.repository.name }}_dev:${{ github.sha }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          push: false
          load: true
          context: ./
          file: ./docker/test.Dockerfile
          tags: ${{ env.DEV_DOCKER_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/${{ github.event.repository.name }}_dev.tar
      - name: Upload OCI
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}_dev_${{ github.sha }}
          path: /tmp/${{ github.event.repository.name }}_dev.tar
          retention-days: 2
  
  formatting:
    name: Check formatting
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - uses: ./.github/actions/docker-dl
      - name: Check formatting
        run: docker run ${{ env.DEV_DOCKER_IMAGE }} mix format --check-formatted

  credo:
    name: Lint with Credo
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - uses: ./.github/actions/docker-dl
      - name: Credo
        run: docker run ${{ env.DEV_DOCKER_IMAGE }} mix credo --strict

  test:
    name: Tests
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - uses: ./.github/actions/docker-dl
      - name: Execute tests
        run: docker run -v /tmp/lcov:/root/cover ${{ env.DEV_DOCKER_IMAGE }} mix test --cover
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v3
        with:
          name: elixir-lcov
          path: /tmp/lcov

  dialyzer:
    name: Typecheck with Dialyzer
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - uses: ./.github/actions/docker-dl
      - name: Setup PLT cache
        uses: actions/cache@v3
        with:
          path: /tmp/elixir_build_cache
          # Only hit the cache if the lock file hasn't changed, and the environment is the same:
          key: ${{ runner.os }}-${{ hashFiles('Dockerfile') }}-${{ hashFiles('docker/test.Dockerfile') }}-${{ hashFiles('mix.lock') }}'
      - name: Run dialyzer
        run: docker run -v /tmp/elixir_build_cache:/root/_build ${{ env.DEV_DOCKER_IMAGE }} mix dialyzer

name: Elixir CI

on: [push, pull_request]

jobs:
  build:

    name: Build and test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    # cache the ASDF directory, using the values from .tool-versions
    - name: ASDF cache
      uses: actions/cache@v2
      with:
        path: ~/.asdf
        key: ${{ runner.os }}-asdf-v2-${{ hashFiles('.tool-versions') }}
      id: asdf-cache
    # only run `asdf install` if we didn't hit the cache
    - uses: asdf-vm/actions/install@v1
      if: steps.asdf-cache.outputs.cache-hit != 'true'
    # if we did hit the cache, set up the environment
    - name: Setup ASDF environment
      run: |
        echo "ASDF_DIR=$HOME/.asdf" >> $GITHUB_ENV
        echo "ASDF_DATA_DIR=$HOME/.asdf" >> $GITHUB_ENV
      if: steps.asdf-cache.outputs.cache-hit == 'true'
    - name: Reshim ASDF
      run: |
        echo "$ASDF_DIR/bin" >> $GITHUB_PATH
        echo "$ASDF_DIR/shims" >> $GITHUB_PATH
        $ASDF_DIR/bin/asdf reshim
    - name: Restore dependencies cache
      id: deps-cache
      uses: actions/cache@v2
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    - name: Install dependencies
      run: |
        mix local.rebar --foce
        mix local.hex --force
        mix deps.get
    - name: Compile (warnings as errors)
      run: mix compile --force --warnings-as-errors
    - name: Check formatting
      run: mix format --check-formatted
    - name: Credo
      run: mix credo --strict
    - name: Run tests
      run: mix test --cover
    - name: Save PR information
      run: |
        echo "${{ github.event.pull_request.number }}" > coverage/PR_NUMBER
        echo "${{ github.event.pull_request.head.sha }}" > coverage/PR_SHA
      if: github.event.pull_request
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v2
      with:
        name: elixir-lcov
        path: coverage/
    - name: Set Dialyzer Cache Keys
      run: |
        cat <<EOF > ${{ runner.temp }}/cache_keys.exs
        architecture = :erlang.system_info(:system_architecture)
        action = "dialyzer"
        cache_key = Enum.intersperse([architecture, action, System.otp_release(), System.version()], ?-)
        otp_prefix = Enum.intersperse([architecture, action, System.otp_release()], ?-)
        system_prefix = Enum.intersperse([architecture, action], ?-)
        IO.puts(['::set-output name=CACHE_KEY::', cache_key])
        IO.puts(['::set-output name=OTP_PREFIX::', otp_prefix])
        IO.puts(['::set-output name=SYSTEM_PREFIX::', system_prefix])
        EOF
        elixir -r ${{ runner.temp }}/cache_keys.exs
        rm -f ${{ runner.temp }}/cache_keys.exs
      id: dialyzer-keys
    - name: Restore Dialyzer cache
      id: dialyzer-cache
      uses: actions/cache@v2
      with:
        path: _build/dev/dialyxir*.plt*
        key: ${{ steps.dialyzer-keys.outputs.CACHE_KEY }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ steps.dialyzer-keys.outputs.CACHE_KEY }}-
          ${{ steps.dialyzer-keys.outputs.OTP_PREFIX }}-
          ${{ steps.dialyzer-keys.outputs.SYSTEM_PREFIX }}-
    - name: Dialyzer
      run: mix dialyzer --halt-exit-status
